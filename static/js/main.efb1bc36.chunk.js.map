{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortField","setSortField","reverseStatus","setReverseStatus","visibleGoods","goods","preparedGoods","sort","good1","good2","Length","length","Name","localeCompare","reverse","getPreparedGoods","isGoodsChanged","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,eAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CH,oBAAS,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,cAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,IAAcL,EAASI,MACzBO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKhB,EAASiB,KACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAKXP,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EACA,CAAEI,YAAWE,kBAETc,EAAkBhB,IAAcL,EAASI,MAAQG,EAOvD,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAcL,EAASiB,OAEvCQ,QAAS,kBAAMnB,EAAaN,EAASiB,OAPvC,iCAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAcL,EAASe,SAEvCU,QAAS,kBAAMnB,EAAaN,EAASe,SAPvC,4BAYA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAajB,IAEjBkB,QAAS,kBAAMjB,GAAkBD,IAPnC,qBAYCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAhDI,WACZnB,EAAaN,EAASI,MACtBI,GAAiB,IA2CX,sBAUJ,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAoBA,aCzH9BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.efb1bc36.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  None,\n  Name,\n  Length,\n}\n\ninterface PrepArgs {\n  sortField: SortType;\n  reverseStatus: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, reverseStatus }: PrepArgs,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField !== SortType.None) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        case SortType.Name:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseStatus) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.None);\n  const [reverseStatus, setReverseStatus] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, reverseStatus },\n  );\n  const isGoodsChanged = (sortField !== SortType.None || reverseStatus);\n\n  const reset = () => {\n    setSortField(SortType.None);\n    setReverseStatus(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortType.Name },\n          )}\n          onClick={() => setSortField(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortType.Length },\n          )}\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !reverseStatus },\n          )}\n          onClick={() => setReverseStatus(!reverseStatus)}\n        >\n          Reverse\n        </button>\n\n        {isGoodsChanged && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}